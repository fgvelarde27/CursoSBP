@page "/fetchdata"
@using CursoSBP.Common.Models.Entities;
@using Newtonsoft.Json;
@inject HttpClient Http

<PageTitle>Listado de Estudiantes</PageTitle>

<h1>Listado de Estudiantes</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (studentList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Fecha Nacimiento</th>
                <th>Correo Electrónico</th>
                <th>Teléfono</th>
                <th>Dirección</th>
                <th>Género</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in studentList)
            {
                <tr>
                    <td>@student.FirstName</td>
                    <td>@student.LastName</td>
                    <td>@student.Birthdate</td>
                    <td>@student.Email</td>
                    <td>@student.Phone</td>
                    <td>@student.Address</td>
                    <td>@student.StudentGender</td>
                    <td>
                       
                        <input type="button" name="btnDetails" value="Details..." @onclick="(() => DetailsRow(student.Id))"/>
                     </td>
                  
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Student>? studentList;
    private string urlBase = "https://localhost:7031/";
    private string servicePrefix = "api/";
    private string controller = "Student";
    //obtiene una lista de estudiantes
    protected override async Task OnInitializedAsync()
    {
        
        try
        {
            HttpClient client = new() { BaseAddress = new Uri(urlBase) };
            client.BaseAddress = new Uri(urlBase);
            var url = $"{servicePrefix}{controller}";
            var response = await client.GetAsync(url);
            var result = await response.Content.ReadAsStringAsync();
            if (result is null) studentList = new List<Student>();
            else
            {
                var studentListMales = JsonConvert.DeserializeObject<List<Student>>(result);
                studentList = studentListMales!.Where(e => e.StudentGender == Common.Enums.Gender.Female).ToList();
            }
        }
        catch (Exception ex)
        {

            Console.Write(ex.Message);
        }

    }

    private async Task DetailsRow(int id)
    {
        
        try
        {
            HttpClient client = new() { BaseAddress = new Uri(urlBase) };
            client.BaseAddress = new Uri(urlBase);
            var url = $"{servicePrefix}{controller}/{id}";
            var response = await client.GetAsync(url);
            var result = await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
        }
    }



  
}
